<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <title></title>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <script src='//api.mapbox.com/mapbox-gl-js/v0.32.1/mapbox-gl.js'></script>
    <link href='//api.mapbox.com/mapbox-gl-js/v0.32.1/mapbox-gl.css' rel='stylesheet' />
    <style>
        * { box-sizing: border-box; }
        body { margin:0; padding:0; color: #636363; }
        #map { position:absolute; top:0; bottom:0; width:100%; }
        .mapboxgl-popup-content { min-width: 200px; text-align: center; }
        .mapboxgl-popup-content a,
        .mapboxgl-popup-content div.heading { 
          color: #636363; font-size: 2em; 
        }
        .mapboxgl-popup-content div.heading,
        .mapboxgl-popup-content div div:last-child {
          padding: 0 0 12px 0;
        }
        .mapboxgl-popup-content div span.year,
        .mapboxgl-popup-content div span.record { 
          display: inline-block; 
        }
        .mapboxgl-popup-content div span.year { padding: 0 0 0 4px; width: 40%; }
        .mapboxgl-popup-content div span.record { text-align: right; width: 60%;}
        .record, .year, .cold, .hot { vertical-align: middle; }
        .record, .year { text-align: center; }
        .record { font-size: 4em; }
        .year { font-size: 2em; text-align: left; }
        .cold, .hot { line-height: 1em; }
        .cold { color: #4da1f5; }
        .hot { color: #ea4752; }
        .fahrenheit { font-size: 40%; vertical-align: text-top; margin-top: -5px; display: inline-block; color: #909090; }
    </style>
</head>
<body>

<div id='map'></div>

<script>

  //
  // Various mapbox gl js samples stitched together...
  //

  mapboxgl.accessToken = 'pk.eyJ1Ijoic3dpbmdsZXkiLCJhIjoiampVaXBkYyJ9.x-w2I-NHC9yZxEH163o81g';
  var app = {};

  app.displayStations = function(e) {
    var geojson = JSON.parse(e.target.response);
    app.map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/streets-v8',
      center: [-96, 37.8],
      zoom: 3
    });

    app.map.on('load', function() {
      var layerNames = ['non-cluster-markers'];
      app.map.addSource("markers", {
        "type": "geojson",
        "data": geojson,
        "cluster": true,
        "clusterMaxZoom": 14, // Max zoom to cluster points on
        "clusterRadius": 50 // Radius of each cluster when clustering points (defaults to 50
      });

      // Non-clustered makers.
      app.map.addLayer({
        "id": "non-cluster-markers",
        "type": "symbol",
        "source": "markers",
        "layout": {
          "icon-image": "marker-15"
        }
      });

      // Each range gets a different fill color.
      var layers = [
        [30, '#f28cb1'],
        [10, '#f1f075'],
        [0, '#51bbd6']
      ];

      layers.forEach(function(layer, i) {
        var id = 'cluster-' + i;
        layerNames.push(id);
        app.map.addLayer({
          "id": id,
          "type": "circle",
          "source": "markers",
          "paint": {
            "circle-color": layer[1],
            "circle-radius": 18
          },
          "filter": i == 0 ?
            [">=", "point_count", layer[0]] : ["all", [">=", "point_count", layer[0]],
              ["<", "point_count", layers[i - 1][0]]
            ]
        });
      });

      // Add a layer for the clusters' count labels
      layerNames.push('cluster-count');
      app.map.addLayer({
        "id": layerNames[layerNames.length - 1],
        "type": "symbol",
        "source": "markers",
        "layout": {
          "text-field": "{point_count}",
          "text-font": [
            "DIN Offc Pro Medium",
            "Arial Unicode MS Bold"
          ],
          "text-size": 12
        }
      });

      // When a click event occurs near a marker icon, open a popup at the location of
      // the feature, with description HTML from its properties.
      var queryLayers = {
        // Ignore the cluster-count layer.
        layers: layerNames.filter(function(n) { return n.indexOf('count') === -1; })
      };
      console.log('queryLayers', queryLayers)
      app.map.on('click', function(e) {
        // var features = map.queryRenderedFeatures(e.point, { layers: ['markers'] });
        // var features = map.queryRenderedFeatures(e.point, { layers: layerNames });
        var features = app.map.queryRenderedFeatures(e.point, queryLayers);
        // console.log('features clicked', features);
        // var sourceFeatures = app.map.querySourceFeatures('markers', {
        //   filter: ['>=', 'rowid', 0]
        // });
        // console.log('sourceFeatures', sourceFeatures);

        if (!features.length) {
          return;
        }

        var feature = features[0];
        // console.log('click', e.lngLat, feature.geometry.coordinates);

        // Populate the popup and set its coordinates
        // based on the feature found.
        app.popup = new mapboxgl.Popup()
          // .setLngLat(feature.geometry.coordinates)
          .setLngLat(e.lngLat)
          .setHTML(getContent(feature))
          .addTo(app.map);
      });

      function getContent(feature) {
        var content;
        if ( feature.properties.cluster ) {
          content = feature.properties.point_count + ' stations. Zoom in for more info.';
        } else {
          var n = feature.properties.name;
          var p = feature.properties.place;
          content = '<a href="/' + p + '">' + n + '</a>';
          var today = new Date();
          var month = today.getMonth();
          var day = today.getDate();
          // Month is zero-indexed, add one.
          var mmdd = pad(month + 1) + '-' + pad(day);
          var apiUrl = '/' + feature.properties.station + '/on/' + mmdd + '.json';
          getRecords(apiUrl, mmdd)
        }
        return content;
      }

      function pad(val) {
        if ( val < 10 ) {
          val = '0' + val;
        } else {
          val = '' + val;
        }
        return val;
      }

      function getRecords(apiUrl, mmdd) {
        var xhr = new XMLHttpRequest();
        xhr.addEventListener('load', function(e) {
          var records = JSON.parse(e.target.response);
          var extremes = records.filter(function(r) {
            return r.rank === 1 && (r.record_type === 'TMINLO' || r.record_type === 'TMAXHI');
          });
          var display = extremes.map(function(r) {
            if ( r.record_type === 'TMINLO' ) {
              return '<div><span class="record cold">' + r.value + '<span class="fahrenheit">°F</span></span>' + 
                '<span class="year">(' + r.record_date.split('-')[2] + ')</span></div>';
            }
            if ( r.record_type === 'TMAXHI' ) {
              return '<div><span class="record hot">' + r.value + '<span class="fahrenheit">°F</span></span>' + 
                '<span class="year">(' + r.record_date.split('-')[2] + ')</span></div>';
            }
          });
          var recs = document.createElement('div');
          recs.innerHTML = '<div class="heading">Today\'s records</div>' + display.join('');
          app.popup._content.prepend(recs);
        });
        xhr.open('get', apiUrl);
        xhr.send();
      }

      // Use the same approach as above to indicate that the symbols are clickable
      // by changing the cursor style to 'pointer'.
      app.map.on('mousemove', function(e) {
        var features = app.map.queryRenderedFeatures(e.point, queryLayers);
        app.map.getCanvas().style.cursor = (features.length) ? 'pointer' : '';
      });
    });
  }

  var xhr = new XMLHttpRequest();
  xhr.addEventListener('load', app.displayStations);
  xhr.open('get', '/.geojson');
  xhr.send();

</script>

</body>
</html>
